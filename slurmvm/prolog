#!/usr/bin/python3
# -*- coding: utf-8 -*-
#
# LUNARC HPC Desktop On-Demand graphical launch tool
# Copyright (C) 2017-2021 LUNARC, Lund University
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

"""
Prolog/Epilog-script for managing VM:s through slurm.
"""

import os
import pwd
import sys
import time
import logging as log

from lhpcvm import VMTracker, XenServer, PortProber, SlurmVMConfig, VM, Win10VM, CentOS7VM

if __name__ == "__main__":

    # --- Enable script to run without actually starting VMs

    dry_run = False

    # --- Extract script name for determining if this script
    #     is executed as prolog or epilog

    script_name = sys.argv[0].split('/')[-1]

    # --- Read configuration

    print("Reading configuration file")
    slurm_vm_config = SlurmVMConfig()

    log_level = log.DEBUG

    if slurm_vm_config.log_level == "DEBUG":
        log_level = log.DEBUG
    if slurm_vm_config.log_level == "INFO":
        log_level = log.INFO
    if slurm_vm_config.log_level == "WARNING":
        log_level = log.WARNING
    if slurm_vm_config.log_level == "ERROR":
        log_level = log.ERROR

    xen_server_host = slurm_vm_config.xen_server_hostname
    snapshot_prefix = slurm_vm_config.snapshot_prefix
    manage_vm = slurm_vm_config.manage_vm
    manage_server = slurm_vm_config.manage_server

    # --- Get environment variables from SLURM epilog/prolog

    job_id = ""
    user_name = ""
    user_id = -1
    job_name = ""

    try:
        job_id = os.environ["SLURM_JOBID"]
        user_name = os.environ["SLURM_JOB_USER"]
        user_id = int(os.environ["SLURM_JOB_UID"])
        job_name = os.environ["SLURM_JOB_NAME"]
    except KeyError:
        print("Script not running as a prolog script in SLUMR.")

    pwd_entry = pwd.getpwuid(user_id)
    group_id = pwd_entry.pw_gid
    home_dir = pwd_entry.pw_dir

    # --- Configure logging - All messages from prolog/epilog uses Python logging.

    log.basicConfig(filename="%s-%s.log" % ("lhpc-proepi", job_id),
                    level=log.DEBUG, format='%(asctime)s : %(levelname)-8s : %(message)s')

    # --- Redirect stderr and stdout output to catch other error messages.

    sys.stdout = open("%s-%s.out" % ("lhpc-proepi", job_id), 'a')
    sys.stderr = sys.stdout

    # --- Print job information

    log.info('---------------------------------------------------------')
    log.info('Job information')
    log.info('---------------------------------------------------------')
    log.info('Job ID      :'+job_id)
    log.info('Username    :'+user_name)
    log.info('Userid      :'+str(user_id))
    log.info('group_id    :'+str(group_id))
    log.info('home_dir    :'+home_dir)
    log.info('script-uid  :'+str(os.getuid()))
    log.info('---------------------------------------------------------')

    # --- Script is executing as prolog (before job)

    if script_name == "prolog":

        log.info("Running prolog-skript.")

        # --- Get tracker object

        tracker = VMTracker(slurm_vm_config)
        tracker.status()

        # tracker = create_tracker(state_filename, lock)

        tracker.user_id = user_id
        tracker.group_id = group_id
        tracker.home_dir = home_dir

        # --- Aquire availble vm_host

        log.info("Request availble VM for job id %s." % job_id)

        vm_name, vm_host = tracker.aquire_vm(job_id)

        if vm_name != "":

            log.info("Aquired %s for job id %s." % (vm_name, job_id))

            vm_kind = slurm_vm_config.vm_kind(vm_name)
            vm_logoff_users_script = slurm_vm_config.vm_logoff_users_script(vm_kind)
            vm_enable_user_script = slurm_vm_config.vm_enable_user_script(vm_kind)
            vm_disable_user_script = slurm_vm_config.vm_disable_user_script(vm_kind)
            vm_update_script = slurm_vm_config.vm_update_script(vm_kind)
            vm_check_reboot_script = slurm_vm_config.vm_check_reboot_script(vm_kind)
            vm_system_account = slurm_vm_config.vm_system_account(vm_kind)

            # --- Create a VM manager

            if manage_server:
                if vm_kind == "win10":
                    vm_mgr = Win10VM(vm_host, vm_system_account)
                    vm_mgr.enable_user_script = vm_enable_user_script
                    vm_mgr.disable_user_script = vm_disable_user_script
                    vm_mgr.logoff_users_script = vm_logoff_users_script
                    vm_mgr.update_script = vm_logoff_users_script
                    vm_mgr.check_reboot_script = vm_check_reboot_script

                if vm_kind == "centos7":
                    vm_mgr = CentOS7VM(vm_host)

                # --- Log off all users on VM

                log.info("Logging off all users on %s" % vm_host)
                vm_mgr.logoff_users()
                error_in_logoff = vm_mgr.in_error()

                log.info("Enable user %s" % user_name)
                vm_mgr.enable_user(user_name)
                error_in_enable_user = vm_mgr.in_error()

            # --- Write ip file for client

            log.info("Forking process to write job_hostfile...")
            pid = os.fork()

            if pid == 0:
                try:
                    os.setgid(group_id)
                    os.setuid(user_id)
                    if (error_in_logoff or error_in_enable_user):
                        tracker.write_job_hostfile(job_id, "0.0.0.0")
                    else:
                        tracker.write_job_hostfile(job_id, vm_host)
                finally:
                    os._exit(0)

            os.waitpid(pid, 0)
            log.info("... back from fork.")
        else:
            log.error("Failed to aquire VM.")

    # --- Script is executing as epilog (after job)

    if script_name == "epilog":

        log.info("Running as epilog-skript.")

        # --- Get tracker object

        tracker = VMTracker(slurm_vm_config)
        tracker.status()

        tracker.user_id = user_id
        tracker.group_id = group_id
        tracker.home_dir = home_dir

        # --- Release vm from database

        vm_name, vm_host = tracker.release_vm(job_id)

        log.info("Released %s." % vm_name)

        if vm_name != "":

            vm_kind = slurm_vm_config.vm_kind(vm_name)
            vm_logoff_users_script = slurm_vm_config.vm_logoff_users_script(vm_kind)
            vm_enable_user_script = slurm_vm_config.vm_enable_user_script(vm_kind)
            vm_disable_user_script = slurm_vm_config.vm_disable_user_script(vm_kind)
            vm_update_script = slurm_vm_config.vm_update_script(vm_kind)
            vm_check_reboot_script = slurm_vm_config.vm_check_reboot_script(vm_kind)
            vm_system_account = slurm_vm_config.vm_system_account(vm_kind)

            # --- Create a VM manager

            if manage_server:
                if vm_kind == "win10":
                    vm_mgr = Win10VM(vm_host, vm_system_account)
                    vm_mgr.enable_user_script = vm_enable_user_script
                    vm_mgr.disable_user_script = vm_disable_user_script
                    vm_mgr.logoff_users_script = vm_logoff_users_script
                    vm_mgr.update_script = vm_logoff_users_script
                    vm_mgr.check_reboot_script = vm_check_reboot_script

                if vm_kind == "centos7":
                    vm_mgr = CentOS7VM(vm_host)

            # --- Remove client ip file

            log.info("Removing client ip file for %s" % vm_name)

            pid = os.fork()

            if pid == 0:
                try:
                    os.setgid(group_id)
                    os.setuid(user_id)
                    tracker.remove_job_hostfile(job_id, vm_host)
                finally:
                    os._exit(0)

            os.waitpid(pid, 0)

            if manage_server:

                # --- Log off all users on VM

                log.info("Logging off all users on %s" % vm_host)
                vm_mgr.logoff_users()
                log.info("Disable user %s" % user_name)
                vm_mgr.disable_user(user_name)
                log.info("Check if reboot is required %s" % vm_host)
                vm_mgr.check_reboot()

                # --- Is this an update job

                if job_name == "update_node" and user_id == 0:

                    log.info("Updating OS on %s" % vm_host)

                    vm_mgr.update()

    log.info(script_name + " completed.")

    sys.stdout.close()
    sys.stderr.close()
