#!/bin/env python

import os, sys, argparse

from Queue import Queue
from PyQt4 import QtCore, QtGui

# --- Version information

gfxlaunch_copyright = """LUNARC HPC Desktop On-Demand - Version %s
Copyright (C) 2017 LUNARC, Lund University
"""
gfxlaunch_copyright_short = """LUNARC HPC Desktop On-Demand - %s"""
gfxlaunch_version = "0.3-beta"

# --- Fix search path for tool

tool_path = os.path.dirname(os.path.abspath(sys.argv[0]))
sys.path.append(tool_path)

from lhpcdt import *

if __name__ == '__main__':

    # Show version information


    print(gfxlaunch_copyright % gfxlaunch_version)
    print("")

    # Parse command line arguments  

    parser = argparse.ArgumentParser(description="Graphical Job Launcher")

    parser.add_argument("--simplified", dest="simplified", action="store_true", default=False)
    parser.add_argument("--cmd", dest="cmdLine", action="store", default="", required=False,
        help = "Command line to launch application")

    parser.add_argument("--vgl", dest="useVGL", action="store_true", default=False,
        help = "Use VirtuaGL infrastructure")

    parser.add_argument("--vglrun", dest="use_vglrun", action="store_true", default=False, 
        help = "Prefix command with vglrun")

    parser.add_argument("--title", dest="title", action="store", default="Lunarc Job Launcher",
        help = "Window title")

    parser.add_argument("--partition", dest="part", action="store",
        help = "Default partition to use")

    parser.add_argument("--account", dest="account", action="store", default="",
        help = "Default account to use")

    parser.add_argument("--exclusive", dest="exclusive", action="store_true", default=False,
        help = "Use node exclusively")

    parser.add_argument("--count", dest="count", action="store", default=1,
        help = "Number of cpu:s to use")

    parser.add_argument("--memory", dest="memory", action="store", default=-1,
        help = "Memory in MB to use")

    parser.add_argument("--time", dest="time", action="store", default="00:30:00", )

    args = parser.parse_args()

    launchSettings = settings.LaunchSettings.create()
    launchSettings.args = args
    launchSettings.tool_path = tool_path
    launchSettings.copyright_info = gfxlaunch_copyright
    launchSettings.copyright_short_info = gfxlaunch_copyright_short
    launchSettings.version_info = gfxlaunch_version

    # Redirect standard output

    redirect = False

    # Create Queue and redirect sys.stdout to this queue

    if redirect:
        queue = Queue()
        sys.stdout = launcher.WriteStream(queue)    

    # Create application object

    app = QtGui.QApplication(sys.argv)
    app.setStyle("GTK+")

    # Show splash

    splashWindow = launcher.SplashWindow(None, gfxlaunch_copyright % gfxlaunch_version)
    splashWindow.show()

    # Show user interface
    
    form = launcher.GfxLaunchWindow()
    form.show()

    # Create receiver thread for catching stdout events and redirecting
    # to user interface.

    if redirect:
        thread = QtCore.QThread()
        receiver = launcher.OutputReceiver(queue)
        receiver.mysignal.connect(form.on_append_text)
        receiver.moveToThread(thread)
        
        thread.started.connect(receiver.run)
        thread.start()

    # Start main application loop

    app.exec_()
